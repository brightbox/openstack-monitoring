#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Swift dispersion monitoring script for Nagios
#
# Copyright Â© 2012 eNovance <licensing@enovance.com>
#
# Author: Julien Danjou <julien@danjou.info>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import json

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

with os.popen("swift-dispersion-report -j %s" \
                  % os.getenv("SWIFT_DISPERSION_CONFIG", "/etc/swift/swift.conf")) as report:
    stats = json.load(report)

msgs = []
state = STATE_OK
missing_critical = int(os.getenv("SWIFT_DISPERSION_MISSING_CRITICAL", 3))

# type_ is either "objects", "container"
for type_, values in stats.iteritems():

    msgs.append("%.2f%% %ss found" % (values['pct_found'], type_))

    for i in range(1,missing_critical+1):
        if values.get("missing_%i" % i, 0) > 0:
            msgs.append("%d %ss missing %i copies" % (values["missing_%i" % i], type_, i))
            if i >= missing_critical:
                state = max(state, STATE_CRITICAL)
            else:
                state = max(state, STATE_WARNING)

print ", ".join(msgs)
sys.exit(state)
